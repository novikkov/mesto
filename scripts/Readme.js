
/* REVIEW. Резюме. Что нужно исправить прежде всего.

1.Прежде всего Вы должны создать правильную структуру файла-точки входа всего проекта script.js. Этот файл -
инициализирует весь проект, можно сказать запускает его на выполнение.
Поэтому в этом файле не должно быть объявления классов (оно у Вас есть в других файлах). Зато в этом файле должно присутствовать
создание экземпляров всех классов с помощью инструкции new (у Вас сейчас экземпляры классов создаются в тех же файлах, где классы
и объявлены, что неправильно).
Также этот файл должен содержать объявление всех констант, нужных для работы проекта. Сейчас у Вас и константы разбросаны по разным файлам, их все
надо перенести в script.js и сделать их объявление до создания экземпляров всех классов.
При создании экземпляров классов, Вы должны им передать в качестве аргументов нужные
константы, которые определены в script.js, а так же экземпляры других классов, или их отдельные методы и свойства (учтите, пожалуйста, что
создание экземпляров одних классов в других классах, также не допустимо).

2. Как Вы должны знать, инструкция new создаёт экземпляр класса и сразу выполняет метод-конструктор этого класса. Также Вы можете в script.js выполнить
и другие методы классов, выполнение которых необходимо сразу после загрузки страницы и которые не выполняются при выполнении метода-конструктора класса.
Сейчас у Вас такие методы запускаются в файлах, где объявляются классы, что также совершенно не верно.

3. Весь код script.js должен быть обёрнут в IIEF функцию.  То есть весь код, не содержащий объявления классов, содержащий
только объявление констант, переменных и функций, нужно обёртывать в IIFE функцию или просто какую-либо функцию, для того,
чтобы объявленные в нём переменные и константы не находились в глобальной области
видимости и не могли конфликтовать с переменными и функциями возможно загружаемых других (не Ваших) скриптов. Поэтому надо защитить
и код скрипта script.js, и const initialCards.
Проще всего  будет перенести const initialCards из initialСards.js в script.js и обернуть весь код script.js в IIFE функцию.
При этом нужно помнить, что после обёртывания константы и функции, которые находились в глобальной области видимости, будут недоступны и Вашим классам.
Поэтому после обёртывания, их надо передавать как аргументы при создании экземпляра класса, определив
нужные параметры класса при объявлении кода класса. После переноса const initialCards и обёртывания script.js в IIFE функцию протестируйте
все функции своего проекта на работоспособность.

  Чтобы понять как обертывание в IIFE защищает содержимое обёртки от глобальной области видимости, можете сами проделать следующий эксперимент
  (по этому же примеру можно понять, как именно обёртывается весь код скрипта в в IIFE, если Вы не знаете).

  Пусть у Вас в index.html загружается два скрипта друг за другом: script1.js и script2.js. И в script1.js следующий код:

  function arithmetic(a, b){
    return console.log(a + b);
  };
  arithmetic(2, 3);

  А в script2.js следующий код:

  function arithmetic(a, b){
    return console.log(a * b);
  };
  arithmetic(2, 3);

  Скрипт script2.js при загрузке скриптов переопределит функцию arithmetic в первом скрипте, и при выполнении команды arithmetic(2, 3); в первом скрипте,
  будет выполняться умножение, а не сложение. Если бы код первого скрипта был обёрнут в IIFE функцию, например так:

  (function () {
  function arithmetic(a, b){
    return console.log(a + b);
  };
  arithmetic(2, 3);
  })();

переопределения бы не произошло, потому что интерпретатор js посчитал бы, что функции arithmetic в первом и во втором скрипте -
разные функции, так как у них разные обласи видимости (локальная в первом скрипте и глобальная во втором).


По обертыванию кода  в IIFE функцию даны развёрнутые пояснения в REVIEW в этом файле.
Об IIFE функциях можно почитать здесь https://learn.javascript.ru/closures-module , здесь
https://developer.mozilla.org/ru/docs/%D0%A1%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D1%8C/IIFE и
здесь https://habr.com/ru/company/ruvds/blog/419997/

*/